{"ast":null,"code":"import _slicedToArray from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\nvar getEventsAndAttendanceForEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(apiState, setApiState) {\n    var events, eventIds, attendance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                isLoading: true\n              });\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return getEvents();\n\n          case 4:\n            events = _context.sent;\n            console.log(\"events\", events); // @ts-ignore fix this once event type clear\n\n            eventIds = events.map(function (event) {\n              return event.id;\n            });\n            attendance = getAttendanceForEvents(eventIds);\n            console.log(\"attendance\", attendance);\n            console.log(\"events\", events);\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                events: events,\n                attendance: attendance\n              });\n            });\n            _context.next = 16;\n            break;\n\n          case 13:\n            _context.prev = 13;\n            _context.t0 = _context[\"catch\"](1);\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                data: {},\n                error: _context.t0,\n                isLoading: false,\n                hasError: true\n              });\n            });\n\n          case 16:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 13]]);\n  }));\n\n  return function getEventsAndAttendanceForEvents(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var useAttendanceAndEvents = function useAttendanceAndEvents() {\n  var _useState = useState({\n    isLoading: false,\n    hasError: false,\n    errorMessage: \"\",\n    events: [],\n    attendance: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      apiState = _useState2[0],\n      setApiState = _useState2[1];\n\n  useEffect(function () {\n    getEventsAndAttendanceForEvents(apiState, setApiState);\n  });\n  return _objectSpread({}, apiState);\n};","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/features/dashboard/DashboardRequests.tsx"],"names":["useEffect","useState","getEvents","getAttendanceForEvents","getEventsAndAttendanceForEvents","apiState","setApiState","prevState","isLoading","events","console","log","eventIds","map","event","id","attendance","data","error","hasError","useAttendanceAndEvents","errorMessage"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,sBAAT,QAAuC,kCAAvC;;AAUA,IAAMC,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBACtCC,QADsC,EAEtCC,WAFsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAItCA,YAAAA,WAAW,CAAC,UAACC,SAAD;AAAA,uCACPA,SADO;AAEVC,gBAAAA,SAAS,EAAE;AAFD;AAAA,aAAD,CAAX;AAJsC;AAAA;AAAA,mBAUfN,SAAS,EAVM;;AAAA;AAU9BO,YAAAA,MAV8B;AAWpCC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB,EAXoC,CAYpC;;AACMG,YAAAA,QAb8B,GAanBH,MAAM,CAACI,GAAP,CAAW,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAACC,EAAV;AAAA,aAAhB,CAbmB;AAc9BC,YAAAA,UAd8B,GAcjBb,sBAAsB,CAACS,QAAD,CAdL;AAepCF,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,UAA1B;AACAN,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AACAH,YAAAA,WAAW,CAAC,UAACC,SAAD;AAAA,uCACPA,SADO;AAEVE,gBAAAA,MAAM,EAANA,MAFU;AAGVO,gBAAAA,UAAU,EAAVA;AAHU;AAAA,aAAD,CAAX;AAjBoC;AAAA;;AAAA;AAAA;AAAA;AAuBpCV,YAAAA,WAAW,CAAC,UAACC,SAAD;AAAA,uCACPA,SADO;AAEVU,gBAAAA,IAAI,EAAE,EAFI;AAGVC,gBAAAA,KAAK,aAHK;AAIVV,gBAAAA,SAAS,EAAE,KAJD;AAKVW,gBAAAA,QAAQ,EAAE;AALA;AAAA,aAAD,CAAX;;AAvBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA/Bf,+BAA+B;AAAA;AAAA;AAAA,GAArC;;AAiCA,OAAO,IAAMgB,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA,kBACVnB,QAAQ,CAAC;AACvCO,IAAAA,SAAS,EAAE,KAD4B;AAEvCW,IAAAA,QAAQ,EAAE,KAF6B;AAGvCE,IAAAA,YAAY,EAAE,EAHyB;AAIvCZ,IAAAA,MAAM,EAAE,EAJ+B;AAKvCO,IAAAA,UAAU,EAAE;AAL2B,GAAD,CADE;AAAA;AAAA,MACnCX,QADmC;AAAA,MACzBC,WADyB;;AAQ1CN,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,+BAA+B,CAACC,QAAD,EAAWC,WAAX,CAA/B;AACD,GAFQ,CAAT;AAIA,2BAAYD,QAAZ;AACD,CAbM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\ntype ApiState = {\n  isLoading: boolean;\n  hasError: boolean;\n  errorMessage: string;\n  events: Array<any>;\n  attendance: Array<any>;\n};\n\nconst getEventsAndAttendanceForEvents = async (\n  apiState: any,\n  setApiState: any\n) => {\n  setApiState((prevState: any) => ({\n    ...prevState,\n    isLoading: true\n  }));\n\n  try {\n    const events = await getEvents();\n    console.log(\"events\", events);\n    // @ts-ignore fix this once event type clear\n    const eventIds = events.map(event => event.id);\n    const attendance = getAttendanceForEvents(eventIds);\n    console.log(\"attendance\", attendance);\n    console.log(\"events\", events);\n    setApiState((prevState: any) => ({\n      ...prevState,\n      events,\n      attendance\n    }));\n  } catch (err) {\n    setApiState((prevState: any) => ({\n      ...prevState,\n      data: {},\n      error: err,\n      isLoading: false,\n      hasError: true\n    }));\n  }\n};\n\nexport const useAttendanceAndEvents = () => {\n  const [apiState, setApiState] = useState({\n    isLoading: false,\n    hasError: false,\n    errorMessage: \"\",\n    events: [],\n    attendance: []\n  });\n  useEffect(() => {\n    getEventsAndAttendanceForEvents(apiState, setApiState);\n  });\n\n  return { ...apiState };\n};\n"]},"metadata":{},"sourceType":"module"}