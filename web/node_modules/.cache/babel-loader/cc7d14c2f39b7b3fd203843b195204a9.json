{"ast":null,"code":"import _regeneratorRuntime from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar BACKEND_BASE_URL = \"localhost:5000\";\nvar EVENT_ENDPOINT = \"\".concat(BACKEND_BASE_URL, \"/events\");\nexport var postEvent =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(eventWithAttendees) {\n    var data, dataJson;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            console.log(\"event\", eventWithAttendees);\n            _context.prev = 1;\n            _context.next = 4;\n            return fetch(\"http://localhost:5000/events\", {\n              method: \"POST\",\n              mode: \"no-cors\",\n              body: JSON.stringify(eventWithAttendees)\n            });\n\n          case 4:\n            data = _context.sent;\n            _context.next = 7;\n            return data.json();\n\n          case 7:\n            dataJson = _context.sent;\n            return _context.abrupt(\"return\", dataJson);\n\n          case 11:\n            _context.prev = 11;\n            _context.t0 = _context[\"catch\"](1);\n            console.log(\"err\", _context.t0);\n\n          case 14:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 11]]);\n  }));\n\n  return function postEvent(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/requests/eventRequest.ts"],"names":["BACKEND_BASE_URL","EVENT_ENDPOINT","postEvent","eventWithAttendees","console","log","fetch","method","mode","body","JSON","stringify","data","json","dataJson"],"mappings":";;AAEA,IAAMA,gBAAgB,GAAG,gBAAzB;AACA,IAAMC,cAAc,aAAMD,gBAAN,YAApB;AAIA,OAAO,IAAME,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,kBAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACvBC,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,kBAArB;AADuB;AAAA;AAAA,mBAGFG,KAAK,CAAC,8BAAD,EAAiC;AACvDC,cAAAA,MAAM,EAAE,MAD+C;AAEvDC,cAAAA,IAAI,EAAE,SAFiD;AAGvDC,cAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeR,kBAAf;AAHiD,aAAjC,CAHH;;AAAA;AAGfS,YAAAA,IAHe;AAAA;AAAA,mBASEA,IAAI,CAACC,IAAL,EATF;;AAAA;AASfC,YAAAA,QATe;AAAA,6CAUdA,QAVc;;AAAA;AAAA;AAAA;AAYrBV,YAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;;AAZqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATH,SAAS;AAAA;AAAA;AAAA,GAAf","sourcesContent":["import { AttendeeData, EventData } from \"./eventTypes\";\n\nconst BACKEND_BASE_URL = \"localhost:5000\";\nconst EVENT_ENDPOINT = `${BACKEND_BASE_URL}/events`;\n\ntype EventWithAttendees = EventData & { attendees: AttendeeData };\n\nexport const postEvent = async (eventWithAttendees: EventWithAttendees) => {\n  console.log(\"event\", eventWithAttendees);\n  try {\n    const data = await fetch(\"http://localhost:5000/events\", {\n      method: \"POST\",\n      mode: \"no-cors\",\n      body: JSON.stringify(eventWithAttendees)\n    });\n\n    const dataJson = await data.json();\n    return dataJson;\n  } catch (err) {\n    console.log(\"err\", err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}