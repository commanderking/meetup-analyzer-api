{"ast":null,"code":"import _slicedToArray from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/king/playground/meetup-analyzer/src/features/event/EventContainer.tsx\";\nimport React, { useEffect, useState } from \"react\";\nimport { useEventsState } from \"../../context/eventsContext\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\nvar getAttendance =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(eventId) {\n    var attendance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getAttendanceForEvents([eventId]);\n\n          case 2:\n            attendance = _context.sent;\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getAttendance(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar EventContainer = function EventContainer(_ref2) {\n  var match = _ref2.match;\n\n  var _useEventsState = useEventsState(),\n      events = _useEventsState.events;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      attendance = _useState2[0],\n      setAttendance = _useState2[1];\n\n  useEffect(function () {\n    var event = events.find(function (event) {\n      return event.id = match.params.id;\n    });\n    console.log(\"event\", event);\n\n    if (event) {\n      var _attendance = getAttendance(event.id);\n\n      console.log(\"attendance\", _attendance);\n    }\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"Event \", match.params.id);\n};\n\nexport default EventContainer;","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/features/event/EventContainer.tsx"],"names":["React","useEffect","useState","useEventsState","getAttendanceForEvents","getAttendance","eventId","attendance","EventContainer","match","events","setAttendance","event","find","id","params","console","log"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,cAAT,QAA+B,6BAA/B;AACA,SAASC,sBAAT,QAAuC,kCAAvC;;AAMA,IAAMC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACKF,sBAAsB,CAAC,CAACE,OAAD,CAAD,CAD3B;;AAAA;AACdC,YAAAA,UADc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAbF,aAAa;AAAA;AAAA;AAAA,GAAnB;;AAIA,IAAMG,cAAc,GAAG,SAAjBA,cAAiB,QAAsB;AAAA,MAAnBC,KAAmB,SAAnBA,KAAmB;;AAAA,wBACxBN,cAAc,EADU;AAAA,MACnCO,MADmC,mBACnCA,MADmC;;AAAA,kBAEPR,QAAQ,CAAC,EAAD,CAFD;AAAA;AAAA,MAEpCK,UAFoC;AAAA,MAExBI,aAFwB;;AAG3CV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMW,KAAK,GAAGF,MAAM,CAACG,IAAP,CAAY,UAAAD,KAAK;AAAA,aAAKA,KAAK,CAACE,EAAN,GAAWL,KAAK,CAACM,MAAN,CAAaD,EAA7B;AAAA,KAAjB,CAAd;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBL,KAArB;;AACA,QAAIA,KAAJ,EAAW;AACT,UAAML,WAAU,GAAGF,aAAa,CAACO,KAAK,CAACE,EAAP,CAAhC;;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BV,WAA1B;AACD;AACF,GAPQ,EAON,EAPM,CAAT;AASA,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAYE,KAAK,CAACM,MAAN,CAAaD,EAAzB,CAAP;AACD,CAbD;;AAeA,eAAeN,cAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useEventsState } from \"../../context/eventsContext\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\ntype Props = {\n  match: any;\n};\n\nconst getAttendance = async (eventId: string) => {\n  const attendance = await getAttendanceForEvents([eventId]);\n};\n\nconst EventContainer = ({ match }: Props) => {\n  const { events } = useEventsState();\n  const [attendance, setAttendance] = useState([]);\n  useEffect(() => {\n    const event = events.find(event => (event.id = match.params.id));\n    console.log(\"event\", event);\n    if (event) {\n      const attendance = getAttendance(event.id);\n      console.log(\"attendance\", attendance);\n    }\n  }, []);\n\n  return <div>Event {match.params.id}</div>;\n};\n\nexport default EventContainer;\n"]},"metadata":{},"sourceType":"module"}