{"ast":null,"code":"import _slicedToArray from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { useEventsState } from \"../../context/eventsContext\";\n\nvar getEventsAndAttendanceForEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(setApiState, setEvents) {\n    var events, eventIds;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                isLoading: true\n              });\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return getEvents();\n\n          case 4:\n            events = _context.sent;\n            // @ts-ignore fix this once event type clear\n            eventIds = events.map(function (event) {\n              return event.id;\n            }); // const attendance = await getAttendanceForEvents(eventIds);\n\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                isLoading: false,\n                events: events // attendance\n\n              });\n            });\n            setEvents(events);\n            _context.next = 13;\n            break;\n\n          case 10:\n            _context.prev = 10;\n            _context.t0 = _context[\"catch\"](1);\n            setApiState(function (prevState) {\n              return _objectSpread({}, prevState, {\n                data: {},\n                error: _context.t0,\n                isLoading: false,\n                hasError: true\n              });\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[1, 10]]);\n  }));\n\n  return function getEventsAndAttendanceForEvents(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var useAttendanceAndEvents = function useAttendanceAndEvents() {\n  var _useState = useState({\n    isLoading: false,\n    hasError: false,\n    errorMessage: \"\",\n    events: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      apiState = _useState2[0],\n      setApiState = _useState2[1];\n\n  var _useEventsState = useEventsState(),\n      setEvents = _useEventsState.setEvents;\n\n  useEffect(function () {\n    getEventsAndAttendanceForEvents(setApiState, setEvents);\n  }, []);\n  return _objectSpread({}, apiState);\n};","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/features/dashboard/DashboardRequests.tsx"],"names":["useEffect","useState","getEvents","useEventsState","getEventsAndAttendanceForEvents","setApiState","setEvents","prevState","isLoading","events","eventIds","map","event","id","data","error","hasError","useAttendanceAndEvents","errorMessage","apiState"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,SAASC,cAAT,QAA+B,6BAA/B;;AASA,IAAMC,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBACtCC,WADsC,EAEtCC,SAFsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAItCD,YAAAA,WAAW,CAAC,UAACE,SAAD;AAAA,uCACPA,SADO;AAEVC,gBAAAA,SAAS,EAAE;AAFD;AAAA,aAAD,CAAX;AAJsC;AAAA;AAAA,mBAUfN,SAAS,EAVM;;AAAA;AAU9BO,YAAAA,MAV8B;AAWpC;AACMC,YAAAA,QAZ8B,GAYnBD,MAAM,CAACE,GAAP,CAAW,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAACC,EAAV;AAAA,aAAhB,CAZmB,EAapC;;AACAR,YAAAA,WAAW,CAAC,UAACE,SAAD;AAAA,uCACPA,SADO;AAEVC,gBAAAA,SAAS,EAAE,KAFD;AAGVC,gBAAAA,MAAM,EAANA,MAHU,CAIV;;AAJU;AAAA,aAAD,CAAX;AAMAH,YAAAA,SAAS,CAACG,MAAD,CAAT;AApBoC;AAAA;;AAAA;AAAA;AAAA;AAsBpCJ,YAAAA,WAAW,CAAC,UAACE,SAAD;AAAA,uCACPA,SADO;AAEVO,gBAAAA,IAAI,EAAE,EAFI;AAGVC,gBAAAA,KAAK,aAHK;AAIVP,gBAAAA,SAAS,EAAE,KAJD;AAKVQ,gBAAAA,QAAQ,EAAE;AALA;AAAA,aAAD,CAAX;;AAtBoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA/BZ,+BAA+B;AAAA;AAAA;AAAA,GAArC;;AAgCA,OAAO,IAAMa,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA,kBACVhB,QAAQ,CAAC;AACvCO,IAAAA,SAAS,EAAE,KAD4B;AAEvCQ,IAAAA,QAAQ,EAAE,KAF6B;AAGvCE,IAAAA,YAAY,EAAE,EAHyB;AAIvCT,IAAAA,MAAM,EAAE;AAJ+B,GAAD,CADE;AAAA;AAAA,MACnCU,QADmC;AAAA,MACzBd,WADyB;;AAAA,wBAQpBF,cAAc,EARM;AAAA,MAQlCG,SARkC,mBAQlCA,SARkC;;AAS1CN,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,+BAA+B,CAACC,WAAD,EAAcC,SAAd,CAA/B;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,2BAAYa,QAAZ;AACD,CAdM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\nimport { useEventsState } from \"../../context/eventsContext\";\n\ntype ApiState = {\n  isLoading: boolean;\n  hasError: boolean;\n  errorMessage: string;\n  events: Array<any>;\n};\n\nconst getEventsAndAttendanceForEvents = async (\n  setApiState: any,\n  setEvents: any\n) => {\n  setApiState((prevState: ApiState) => ({\n    ...prevState,\n    isLoading: true\n  }));\n\n  try {\n    const events = await getEvents();\n    // @ts-ignore fix this once event type clear\n    const eventIds = events.map(event => event.id);\n    // const attendance = await getAttendanceForEvents(eventIds);\n    setApiState((prevState: ApiState) => ({\n      ...prevState,\n      isLoading: false,\n      events\n      // attendance\n    }));\n    setEvents(events);\n  } catch (err) {\n    setApiState((prevState: ApiState) => ({\n      ...prevState,\n      data: {},\n      error: err,\n      isLoading: false,\n      hasError: true\n    }));\n  }\n};\n\nexport const useAttendanceAndEvents = () => {\n  const [apiState, setApiState] = useState({\n    isLoading: false,\n    hasError: false,\n    errorMessage: \"\",\n    events: []\n  });\n\n  const { setEvents } = useEventsState();\n  useEffect(() => {\n    getEventsAndAttendanceForEvents(setApiState, setEvents);\n  }, []);\n\n  return { ...apiState };\n};\n"]},"metadata":{},"sourceType":"module"}