{"ast":null,"code":"import _classCallCheck from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport auth0 from \"auth0-js\";\nimport history from \"./history\";\n\nvar Auth =\n/*#__PURE__*/\nfunction () {\n  _createClass(Auth, [{\n    key: \"login\",\n    value: function login() {\n      this.auth0.authorize();\n    }\n  }]);\n\n  function Auth() {\n    _classCallCheck(this, Auth);\n\n    this.auth0 = new auth0.WebAuth({\n      domain: process.env.REACT_APP_AUTH_DOMAIN,\n      audience: \"https://dev-1q07ym6g.auth0.com/api/v2/\",\n      clientID: process.env.REACT_APP_AUTH_CLIENTID,\n      redirectUri: \"http://localhost:3000/authCallback\",\n      responseType: \"token id_token\",\n      scope: \"openid\"\n    });\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  _createClass(Auth, [{\n    key: \"handleAuthentication\",\n    value: function handleAuthentication() {\n      var _this = this;\n\n      this.auth0.parseHash(function (err, authResult) {\n        console.log(\"authResult\", authResult);\n\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this.setSession(authResult);\n        } else if (err) {\n          // history.replace(\"/home\");\n          console.log(err);\n          alert(\"Error: \".concat(err.error, \". Check the console for further details.\"));\n        }\n      });\n    }\n  }, {\n    key: \"getAccessToken\",\n    value: function getAccessToken() {\n      return this.accessToken;\n    }\n  }, {\n    key: \"getIdToken\",\n    value: function getIdToken() {\n      return this.idToken;\n    }\n  }, {\n    key: \"setSession\",\n    value: function setSession(authResult) {\n      // Set isLoggedIn flag in localStorage\n      localStorage.setItem(\"isLoggedIn\", \"true\");\n      console.log(\"setting session\"); // Set the time that the Access Token will expire at\n\n      var expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n      this.accessToken = authResult.accessToken;\n      this.idToken = authResult.idToken;\n      this.expiresAt = expiresAt;\n      console.log(\"expiresAt\", this.expiresAt); // navigate to the home route\n\n      history.replace(\"/dashboard\");\n    }\n  }, {\n    key: \"renewSession\",\n    value: function renewSession() {\n      var _this2 = this;\n\n      this.auth0.checkSession({}, function (err, authResult) {\n        if (authResult && authResult.accessToken && authResult.idToken) {\n          _this2.setSession(authResult);\n        } else if (err) {\n          _this2.logout();\n\n          console.log(err);\n          alert(\"Could not get a new token (\".concat(err.error, \": \").concat(err.error_description, \").\"));\n        }\n      });\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      // Remove tokens and expiry time\n      this.accessToken = null;\n      this.idToken = null;\n      this.expiresAt = 0; // Remove isLoggedIn flag from localStorage\n\n      localStorage.removeItem(\"isLoggedIn\");\n      this.auth0.logout({\n        returnTo: window.location.origin\n      }); // navigate to the home route\n      // history.replace(\"/\");\n    }\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      // Check whether the current time is past the\n      // access token's expiry time\n      var expiresAt = this.expiresAt;\n      console.log(\"this.expiresAt\", this.expiresAt);\n      return new Date().getTime() < expiresAt;\n    }\n  }]);\n\n  return Auth;\n}();\n\nexport { Auth as default };","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/auth/auth.js"],"names":["auth0","history","Auth","authorize","WebAuth","domain","process","env","REACT_APP_AUTH_DOMAIN","audience","clientID","REACT_APP_AUTH_CLIENTID","redirectUri","responseType","scope","login","bind","logout","handleAuthentication","isAuthenticated","getAccessToken","getIdToken","renewSession","parseHash","err","authResult","console","log","accessToken","idToken","setSession","alert","error","localStorage","setItem","expiresAt","expiresIn","Date","getTime","replace","checkSession","error_description","removeItem","returnTo","window","location","origin"],"mappings":"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","sourcesContent":["import auth0 from \"auth0-js\";\nimport history from \"./history\";\n\nexport default class Auth {\n  accessToken;\n  idToken;\n  expiresAt;\n  auth0 = new auth0.WebAuth({\n    domain: process.env.REACT_APP_AUTH_DOMAIN,\n    audience: \"https://dev-1q07ym6g.auth0.com/api/v2/\",\n    clientID: process.env.REACT_APP_AUTH_CLIENTID,\n    redirectUri: \"http://localhost:3000/authCallback\",\n    responseType: \"token id_token\",\n    scope: \"openid\"\n  });\n\n  login() {\n    this.auth0.authorize();\n  }\n\n  constructor() {\n    this.login = this.login.bind(this);\n    this.logout = this.logout.bind(this);\n    this.handleAuthentication = this.handleAuthentication.bind(this);\n    this.isAuthenticated = this.isAuthenticated.bind(this);\n    this.getAccessToken = this.getAccessToken.bind(this);\n    this.getIdToken = this.getIdToken.bind(this);\n    this.renewSession = this.renewSession.bind(this);\n  }\n\n  handleAuthentication() {\n    this.auth0.parseHash((err, authResult) => {\n      console.log(\"authResult\", authResult);\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        // history.replace(\"/home\");\n        console.log(err);\n        alert(`Error: ${err.error}. Check the console for further details.`);\n      }\n    });\n  }\n\n  getAccessToken() {\n    return this.accessToken;\n  }\n\n  getIdToken() {\n    return this.idToken;\n  }\n\n  setSession(authResult) {\n    // Set isLoggedIn flag in localStorage\n    localStorage.setItem(\"isLoggedIn\", \"true\");\n    console.log(\"setting session\");\n    // Set the time that the Access Token will expire at\n    let expiresAt = authResult.expiresIn * 1000 + new Date().getTime();\n    this.accessToken = authResult.accessToken;\n    this.idToken = authResult.idToken;\n    this.expiresAt = expiresAt;\n    console.log(\"expiresAt\", this.expiresAt);\n\n    // navigate to the home route\n    history.replace(\"/dashboard\");\n  }\n\n  renewSession() {\n    this.auth0.checkSession({}, (err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        this.setSession(authResult);\n      } else if (err) {\n        this.logout();\n        console.log(err);\n        alert(\n          `Could not get a new token (${err.error}: ${err.error_description}).`\n        );\n      }\n    });\n  }\n\n  logout() {\n    // Remove tokens and expiry time\n    this.accessToken = null;\n    this.idToken = null;\n    this.expiresAt = 0;\n\n    // Remove isLoggedIn flag from localStorage\n    localStorage.removeItem(\"isLoggedIn\");\n\n    this.auth0.logout({\n      returnTo: window.location.origin\n    });\n\n    // navigate to the home route\n    // history.replace(\"/\");\n  }\n\n  isAuthenticated() {\n    // Check whether the current time is past the\n    // access token's expiry time\n    let expiresAt = this.expiresAt;\n    console.log(\"this.expiresAt\", this.expiresAt);\n    return new Date().getTime() < expiresAt;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}