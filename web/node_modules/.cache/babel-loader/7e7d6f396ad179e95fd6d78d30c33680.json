{"ast":null,"code":"import _objectSpread from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\nvar getEventsAndAttendanceForEvents =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    var events, eventIds, attendance;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return getEvents();\n\n          case 2:\n            events = _context.sent;\n            console.log(\"events\", events); // @ts-ignore fix this once event type clear\n\n            eventIds = events.map(function (event) {\n              return event.id;\n            });\n            attendance = getAttendanceForEvents(eventIds);\n            console.log(\"attendance\", attendance);\n            console.log(\"events\", events);\n            return _context.abrupt(\"return\", {\n              attendance: attendance,\n              events: events\n            });\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getEventsAndAttendanceForEvents() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport var useAttendanceAndEvents = function useAttendanceAndEvents() {\n  var _useState = useState({\n    isLoading: false,\n    hasError: false,\n    events: [],\n    attendance: []\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      apiState = _useState2[0],\n      setApiState = _useState2[1];\n\n  useEffect(function () {\n    getEventsAndAttendanceForEvents();\n  });\n  return _objectSpread({}, apiState);\n};","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/features/dashboard/DashboardRequests.tsx"],"names":["useEffect","useState","getEvents","getAttendanceForEvents","getEventsAndAttendanceForEvents","events","console","log","eventIds","map","event","id","attendance","useAttendanceAndEvents","isLoading","hasError","apiState","setApiState"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,6BAA1B;AACA,SAASC,sBAAT,QAAuC,kCAAvC;;AAEA,IAAMC,+BAA+B;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACjBF,SAAS,EADQ;;AAAA;AAChCG,YAAAA,MADgC;AAEtCC,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB,EAFsC,CAGtC;;AACMG,YAAAA,QAJgC,GAIrBH,MAAM,CAACI,GAAP,CAAW,UAAAC,KAAK;AAAA,qBAAIA,KAAK,CAACC,EAAV;AAAA,aAAhB,CAJqB;AAKhCC,YAAAA,UALgC,GAKnBT,sBAAsB,CAACK,QAAD,CALH;AAMtCF,YAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0BK,UAA1B;AACAN,YAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBF,MAAtB;AAPsC,6CAQ/B;AAAEO,cAAAA,UAAU,EAAVA,UAAF;AAAcP,cAAAA,MAAM,EAANA;AAAd,aAR+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA/BD,+BAA+B;AAAA;AAAA;AAAA,GAArC;;AAWA,OAAO,IAAMS,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AAAA,kBACVZ,QAAQ,CAAC;AACvCa,IAAAA,SAAS,EAAE,KAD4B;AAEvCC,IAAAA,QAAQ,EAAE,KAF6B;AAGvCV,IAAAA,MAAM,EAAE,EAH+B;AAIvCO,IAAAA,UAAU,EAAE;AAJ2B,GAAD,CADE;AAAA;AAAA,MACnCI,QADmC;AAAA,MACzBC,WADyB;;AAO1CjB,EAAAA,SAAS,CAAC,YAAM;AACdI,IAAAA,+BAA+B;AAChC,GAFQ,CAAT;AAIA,2BAAYY,QAAZ;AACD,CAZM","sourcesContent":["import { useEffect, useState } from \"react\";\nimport { getEvents } from \"../../requests/eventRequest\";\nimport { getAttendanceForEvents } from \"../../requests/attendanceRequest\";\n\nconst getEventsAndAttendanceForEvents = async () => {\n  const events = await getEvents();\n  console.log(\"events\", events);\n  // @ts-ignore fix this once event type clear\n  const eventIds = events.map(event => event.id);\n  const attendance = getAttendanceForEvents(eventIds);\n  console.log(\"attendance\", attendance);\n  console.log(\"events\", events);\n  return { attendance, events };\n};\n\nexport const useAttendanceAndEvents = () => {\n  const [apiState, setApiState] = useState({\n    isLoading: false,\n    hasError: false,\n    events: [],\n    attendance: []\n  });\n  useEffect(() => {\n    getEventsAndAttendanceForEvents();\n  });\n\n  return { ...apiState };\n};\n"]},"metadata":{},"sourceType":"module"}