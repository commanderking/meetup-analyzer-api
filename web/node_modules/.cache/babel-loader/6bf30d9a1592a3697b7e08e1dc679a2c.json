{"ast":null,"code":"import _slicedToArray from \"/Users/king/playground/meetup-analyzer/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/king/playground/meetup-analyzer/src/context/eventsContext.tsx\";\nimport React, { useState, useContext } from \"react\";\nvar EventsContext = React.createContext(null);\n\nvar EventsProvider = function EventsProvider(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      events = _useState2[0],\n      setEvents = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      currentEvent = _useState4[0],\n      setCurrentEvent = _useState4[1];\n\n  var value = React.useMemo(function () {\n    return {\n      events: events,\n      setEvents: setEvents,\n      currentEvent: currentEvent,\n      setCurrentEvent: setCurrentEvent\n    };\n  }, [events]);\n  return React.createElement(EventsContext.Provider, Object.assign({\n    value: value\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }));\n};\n\nvar useEventsState = function useEventsState() {\n  var context = useContext(EventsContext);\n\n  if (!context) {\n    throw new Error(\"useReactionState must be used within a ReactionContext Provider\");\n  }\n\n  return context;\n};\n\nexport { EventsProvider, useEventsState };","map":{"version":3,"sources":["/Users/king/playground/meetup-analyzer/src/context/eventsContext.tsx"],"names":["React","useState","useContext","EventsContext","createContext","EventsProvider","props","events","setEvents","currentEvent","setCurrentEvent","value","useMemo","useEventsState","context","Error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,IAAMC,aAAa,GAAGH,KAAK,CAACI,aAAN,CAKZ,IALY,CAAtB;;AAOA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,KAAD,EAAe;AAAA,kBACRL,QAAQ,CAAC,EAAD,CADA;AAAA;AAAA,MAC7BM,MAD6B;AAAA,MACrBC,SADqB;;AAAA,mBAEIP,QAAQ,CAAC,EAAD,CAFZ;AAAA;AAAA,MAE7BQ,YAF6B;AAAA,MAEfC,eAFe;;AAIpC,MAAMC,KAAK,GAAGX,KAAK,CAACY,OAAN,CAAc,YAAM;AAChC,WAAO;AACLL,MAAAA,MAAM,EAANA,MADK;AAELC,MAAAA,SAAS,EAATA,SAFK;AAGLC,MAAAA,YAAY,EAAZA,YAHK;AAILC,MAAAA,eAAe,EAAfA;AAJK,KAAP;AAMD,GAPa,EAOX,CAACH,MAAD,CAPW,CAAd;AASA,SAAO,oBAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAEI;AAA/B,KAA0CL,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD,CAdD;;AAgBA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,MAAMC,OAAO,GAAGZ,UAAU,CAACC,aAAD,CAA1B;;AAEA,MAAI,CAACW,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CACJ,iEADI,CAAN;AAGD;;AAED,SAAOD,OAAP;AACD,CAVD;;AAYA,SAAST,cAAT,EAAyBQ,cAAzB","sourcesContent":["import React, { useState, useContext } from \"react\";\n\nconst EventsContext = React.createContext<{\n  events: Array<any>;\n  currentEvent: string;\n  setEvents: any;\n  setCurrentEvent: any;\n} | null>(null);\n\nconst EventsProvider = (props: {}) => {\n  const [events, setEvents] = useState([]);\n  const [currentEvent, setCurrentEvent] = useState([]);\n\n  const value = React.useMemo(() => {\n    return {\n      events,\n      setEvents,\n      currentEvent,\n      setCurrentEvent\n    };\n  }, [events]);\n\n  return <EventsContext.Provider value={value} {...props} />;\n};\n\nconst useEventsState = () => {\n  const context = useContext(EventsContext);\n\n  if (!context) {\n    throw new Error(\n      \"useReactionState must be used within a ReactionContext Provider\"\n    );\n  }\n\n  return context;\n};\n\nexport { EventsProvider, useEventsState };\n"]},"metadata":{},"sourceType":"module"}